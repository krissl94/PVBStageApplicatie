@{
    var menus = new[]
                {
                   new { LinkText="Home", ActionName="Index",ControllerName="Home",Roles= PVB_Stage_Applicatie.Models.Rollen.Beheerder},
                   new { LinkText="Beheren Bedrijf", ActionName="Index",ControllerName="Bedrijf",Roles=""  },
                   new { LinkText="Mijn Bedrijven", ActionName="Index",ControllerName="Bedrijf",Roles=PVB_Stage_Applicatie.Models.Rollen.Docent },
                   new { LinkText="Beheren Stagiair", ActionName="Index",ControllerName="Stagiair",Roles=""  },
                };
} 
<ul id="menu">menu
    @if (HttpContext.Current.User.Identity.IsAuthenticated)
    {
        PVB_Stage_Applicatie.Models.RolVerdeler rv = new PVB_Stage_Applicatie.Models.RolVerdeler();
        RolePrincipal rp = (RolePrincipal)User;

        String roles = rv.ZoekRolGebruiker(HttpContext.Current.User.Identity.Name);
        var links = from item in menus
                    where item.Roles.Split(new String[] { "," }, StringSplitOptions.RemoveEmptyEntries)
                    .Any(x => roles.Contains(x) || x == "All")
                    select item;
        foreach (var link in links)
        {
            @:
            <li> @Html.ActionLink(link.LinkText, link.ActionName, link.ControllerName)</li>
    }
    }
    else
    {
        var links = from item in menus
                    where item.Roles.Split(new String[] { "," }, StringSplitOptions.RemoveEmptyEntries)
                    .Any(x => new String[] { "All", "Anonymous" }.Contains(x))
                    select item;
        foreach (var link in links)
        {
            @:
            <li> @Html.ActionLink(link.LinkText, link.ActionName, link.ControllerName)</li>
     }
    }
</ul> 